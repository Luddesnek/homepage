import * as options from "./settings.js";

let audioContext;
let audioBuffer;
let audioSource;
let analyser;
let isPlaying = false;
let startTime = 0;
let currentOffset = 0;
let animationId;

function visualizeAudio() {
    if (!analyser) {
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 2048;
    }
    const dataArray = new Uint8Array(analyser.frequencyBinCount);

    function draw() {
        if (!isPlaying) return; // Stop drawing when not playing

        const canvas = document.getElementById("myCanvas");
        const ctx = canvas.getContext("2d");
        const WIDTH = canvas.width;
        const HEIGHT = canvas.height;

        analyser.getByteTimeDomainData(dataArray);

        ctx.clearRect(0, 0, WIDTH, HEIGHT);

        ctx.fillStyle = "rgb(200, 200, 200)";
        ctx.fillRect(0, 0, WIDTH, HEIGHT);

        ctx.lineWidth = 2;
        ctx.strokeStyle = "rgb(0, 0, 0)";
        ctx.beginPath();

        const sliceWidth = WIDTH / dataArray.length;
        let x = 0;

        for (let i = 0; i < dataArray.length; i++) {
            const v = dataArray[i] / 128.0;
            const y = v * (HEIGHT / 2);

            if (i === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }

            x += sliceWidth;
        }

        ctx.lineTo(WIDTH, HEIGHT / 2);
        ctx.stroke();

        animationId = requestAnimationFrame(draw);
    }

    draw();
}

function generateCanvas() {
    const visualizationBox = document.getElementById("visualization");
    const canvas = document.createElement("canvas");
    canvas.id = "myCanvas"; // Ensure the ID is correctly set
    visualizationBox.appendChild(canvas);
}

function generateProfileButtons(profiles) {
    const profilesContainer = document.createElement("div");

    profiles.forEach(profile => {
        const profileButton = document.createElement("button");
        profileButton.textContent = profile.name;
        profileButton.onclick = () => applyProfile(profile);
        profilesContainer.appendChild(profileButton);
    });

    return profilesContainer;
}

function applyProfile(profile) {
    options.updateSettingsProfile(profile.settings);
}

function createFileUploadElement(parent, id) {
    let input = document.createElement("input");
    input.setAttribute("type", "file");
    input.id = id; // Ensure the ID is correctly set
    parent.appendChild(input);
}

function createStructure() {
    generateCanvas();

    let leftMenu = document.getElementById("leftMenu");
    let rightMenu = document.getElementById("rightMenu");

    let optionsContainer = options.generateSettingsContent(options.visOptions);
    let generalSettings = options.generateSettingsContent(options.generalSettings);

    let container = document.createElement("div");
    container.classList.add("box");

    createFileUploadElement(container, "audioFile");
    generalSettings.appendChild(container);

    leftMenu.appendChild(optionsContainer);
    rightMenu.appendChild(generalSettings);

    const profiles = options.loadSettingsProfilesFromLocalStorage();
    const profileButtons = generateProfileButtons(profiles);
    leftMenu.appendChild(profileButtons);

    // Create the buttons and slider to control the visualization
    const playButton = document.createElement("button");
    playButton.textContent = "Play";
    playButton.id = "playButton";
    container.appendChild(playButton);

    const pauseButton = document.createElement("button");
    pauseButton.textContent = "Pause";
    pauseButton.id = "pauseButton";
    container.appendChild(pauseButton);

    const durationLabel = document.createElement("span");
    durationLabel.id = "durationLabel";
    container.appendChild(durationLabel);

    const currentTimeLabel = document.createElement("span");
    currentTimeLabel.id = "currentTimeLabel";
    container.appendChild(currentTimeLabel);

    const seekSlider = document.createElement("input");
    seekSlider.type = "range";
    seekSlider.id = "seekSlider";
    seekSlider.value = "0";
    seekSlider.min = "0";
    seekSlider.max = "100"; // Set max to 100 to represent percentage
    container.appendChild(seekSlider);
}

createStructure();

window.onresize = function () {
    const isMobile = window.matchMedia("(max-width: 768px)").matches;
    const newWidth = isMobile ? "100%" : "15%";
    document.querySelectorAll('.menu').forEach(menu => {
        if (menu.style.width !== '0') {
            menu.style.width = newWidth;
        }
    });
};

let selectedFile = null;

document.getElementById('audioFile').addEventListener('change', function (event) {
    selectedFile = event.target.files[0];
    if (!selectedFile) {
        return;
    }

    if (audioContext) {
        audioContext.close();
    }

    audioContext = new AudioContext();
    const reader = new FileReader();

    reader.onload = function (fileEvent) {
        const arrayBuffer = fileEvent.target.result;
        audioContext.decodeAudioData(arrayBuffer, function (buffer) {
            audioBuffer = buffer;
            document.getElementById('durationLabel').textContent = "Duration: " + buffer.duration.toFixed(2) + " seconds";
        }, function (e) {
            console.log('Error decoding file', e);
        });
    };

    reader.readAsArrayBuffer(selectedFile);
});

document.getElementById('playButton').addEventListener('click', function () {
    if (audioBuffer && audioContext) {
        if (!isPlaying) {
            startAudio();
        }
    }
});

document.getElementById('pauseButton').addEventListener('click', function () {
    if (isPlaying) {
        pauseAudio();
    }
});

document.getElementById('seekSlider').addEventListener('input', function (event) {
    if (audioBuffer) {
        const seekTime = (event.target.value / 100) * audioBuffer.duration;
        if (isPlaying) {
            startAudio(seekTime);
        } else {
            currentOffset = seekTime;
        }
        document.getElementById('currentTimeLabel').textContent = "Current Time: " + seekTime.toFixed(2) + " seconds";
    }
});

function startAudio(offset = 0) {
    if (isPlaying && audioSource) {
        audioSource.stop();
    }

    audioSource = audioContext.createBufferSource();
    audioSource.buffer = audioBuffer;
    audioSource.connect(audioContext.destination);
    analyser = audioContext.createAnalyser();
    audioSource.connect(analyser);
    startTime = audioContext.currentTime - offset;
    currentOffset = offset;
    audioSource.start(0, offset);
    isPlaying = true;
    visualizeAudio();
}

function pauseAudio() {
    if (audioSource) {
        audioSource.stop();
    }
    isPlaying = false;
    currentOffset = audioContext.currentTime - startTime;
    cancelAnimationFrame(animationId);
}

setInterval(function () {
    if (audioSource && isPlaying) {
        const currentTime = audioContext.currentTime - startTime;
        document.getElementById('currentTimeLabel').textContent = "Current Time: " + currentTime.toFixed(2) + " seconds";
        const seekSlider = document.getElementById('seekSlider');
        seekSlider.value = (currentTime / audioBuffer.duration) * 100;
    }
}, 100);